---
alwaysApply: true
---
## Initialization Safety
- Keep the boot sequence in `App.tsx` intact; new async tasks must finish before setting `dbInitialized` to true.
- Surface initialization failures through the existing `dbError` handling instead of throwing unhandled rejections.
- Respect the initial setup gate driven by `storageService` (`INITIAL_SETUP_COMPLETED`) and onboarding gate (`onboarding_completed`) when altering first-run flows.
- Defer notification scheduling or other background jobs until after database and locale setup complete.
- **Initial Setup Flow**: Check `INITIAL_SETUP_COMPLETED` before `onboarding_completed` for proper flow control.

## Data & Services
- Do not call `expo-sqlite` or `AsyncStorage` directly from UI componentsâ€”always go through the established services and hooks.
- Preserve safeguards like `is_active` soft deletes and default-category protections when adjusting service logic.
- Maintain notification templates and scheduling inside `notificationService` so multi-language reminders stay coherent.
- Treat schema changes as coordinated efforts across scripts, services, migrations, and types; partial updates will break existing installs.

## Navigation & UX
- Update both the `ScreenType` union and `AppNavigator` switch when introducing routes; missing either will crash navigation.
- Keep the central `BottomTabBar` action aligned with `navigateTo('addEntry')` unless you update both behaviour and copy.
- All user-facing text belongs in locale JSON files; update every supported language when adding or changing copy.
- Use theme-aware wrappers (`Text`, `Button`, `SafeArea`) to ensure light/dark/colorful modes continue to render correctly.

## TypeScript & Imports
- Leave the strict compiler options in `tsconfig.json` enabled; avoid downgrading checks like `noUncheckedIndexedAccess` or `exactOptionalPropertyTypes`.
- Honour the `@/` alias imports and expose new modules via barrel files instead of deep relative paths.
- Stick with ES module syntax so Expo bundling remains stable; avoid mixing CommonJS patterns into new code.
- Default to ASCII in source files; only add non-ASCII characters where the existing UI already relies on them (e.g. emoji in `BottomTabBar`).
- **CRITICAL**: Use `src/models/` for entity types, not `src/types/` (deprecated).
- **Type Safety**: Avoid `any` types; use specific entity interfaces from `src/models/`.
- **Component Imports**: Use base components from `@/components`, not direct React Native imports.
