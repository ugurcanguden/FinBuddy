---
description: Service-layer structure and extension guidelines for FinBuddy.
alwaysApply: false
---
## Service Pattern
- Implement services as classes with a single exported instance (see `storageService`, `categoryService`, `paymentService`) and keep constructors side-effect free.
- Export every service through `src/services/index.tsx` so `@/services` remains the canonical barrel.
- Prevent UI coupling by limiting service dependencies to other services, contexts, constants, and utilities.
- Type all public methods using models from `src/types`; return explicit promises instead of `any`.

## Existing Services
- Delegate persistence to `storageService` and consume it through hooks like `useStorage` or `usePaymentReminders`.
- Rely on `categoryService` for CRUD operations and default seeding; it enforces invariants such as protecting `is_default` rows.
- Use `paymentService` for summaries, upcoming/overdue queries, and ID generation when working with entries or payments.
- Extend `reportsService`, `textService`, and `notificationService` within their domains rather than creating parallel implementations.

## Extending Services
- Place new domain logic under `src/services/<domain>/`, add an `index.ts` for exports, and wire it into `src/services/index.tsx`.
- Co-locate SQL or constants with the service (e.g. under `src/constants/scripts/`) to avoid scattering magic strings.
- Update or add shared types in `src/types/index.tsx` so all layers consume the same contracts.
- Keep logging concise (✅/❌ patterns) and throw errors back to callers; surface user messaging in hooks or screens.

## Notifications & External IO
- Route scheduling and permission checks through `notificationService`; it already handles templates, channels, and Expo-specific behaviours.
- Manage language and currency preferences via `localeService` and `CurrencyProvider` so persisted settings remain consistent.
- Wrap native APIs such as `LocalAuthentication` in hooks (`useBiometric`) or services to shield the UI from platform differences.
- Update `app.json` plugins and document requirements in `docs/DEVELOPMENT_GUIDE.md` whenever you add new native capabilities.
